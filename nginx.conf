events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'app="$app_name"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=50r/s;

    # Upstream for backend API only (no frontend upstreams needed)
    upstream backend {
        server backend:3000;
        keepalive 32;
    }

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # App1 Frontend - Static files served directly from volume
    server {
        listen 80;
        listen 443 ssl http2;
        server_name ${APP1_DOMAIN};

        # Static files mounted from app1-static container volume
        root /usr/share/nginx/html/app1;
        index index.html;

        # Set app name for logging
        set $app_name "app1";

        # SSL certificates (managed by certbot)
        ssl_certificate /etc/letsencrypt/live/${APP1_DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${APP1_DOMAIN}/privkey.pem;

        # ACME challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect HTTP to HTTPS
        if ($scheme != "https") {
            return 301 https://$host$request_uri;
        }

        # Rate limiting
        limit_req zone=general burst=20 nodelay;

        # API routes to backend (only API needs proxying)
        location /api/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-App-Name "app1";

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Static assets with long caching (served directly from filesystem)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Vue Router / SPA support - fallback to index.html
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "app1 healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # App2 Frontend - Static files served directly from volume
    server {
        listen 80;
        listen 443 ssl http2;
        server_name ${APP2_DOMAIN};

        # Static files mounted from app2-static container volume
        root /usr/share/nginx/html/app2;
        index index.html;

        # Set app name for logging
        set $app_name "app2";

        # SSL certificates (managed by certbot)
        ssl_certificate /etc/letsencrypt/live/${APP2_DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${APP2_DOMAIN}/privkey.pem;

        # ACME challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect HTTP to HTTPS
        if ($scheme != "https") {
            return 301 https://$host$request_uri;
        }

        # Rate limiting
        limit_req zone=general burst=20 nodelay;

        # API routes to backend (only API needs proxying)
        location /api/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-App-Name "app2";

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Static assets with long caching (served directly from filesystem)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Vue Router / SPA support - fallback to index.html
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "app2 healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Default server for unmatched requests
    server {
        listen 80 default_server;
        listen 443 ssl http2 default_server;
        server_name _;

        # Self-signed certificate for default server
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;

        # Nginx health check
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Catch-all
        location / {
            return 444; # Close connection without response
        }
    }
}